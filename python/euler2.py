###############################################################################
# Euler 2
# http://projecteuler.net/problem=2
#
# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.
###############################################################################

import time

# Determine sum of even Fibonacci secquence values below max value n using recursion
def fib_sum(prev, cur, total, n):
	if cur > n:
		return total

	if cur % 2 == 0:
		total = total + cur

	return fib_sum(cur, cur + prev, total, n)

print fib_sum(0, 1, 0, 4000000)

'''
start = time.time()
for i in xrange(1000000): fibsum = fib_sum(1, 1, 0, 4000000)
elapsed = (time.time() - start)
print "result %s returned after %s seconds (1 million iterations)." % (fibsum, elapsed)
'''


# Determine sum of even Fibonacci secquence values below max value n using while loop
def fib_sum_using_while(n):

	prev, cur, total = 0, 1, 0

	while cur < n:
		if cur % 2 == 0:
			total = total + cur

		prev, cur = cur, cur + prev

	return total

print fib_sum_using_while(4000000)

'''
start = time.time()
for i in xrange(1000000): fibsum = fib_sum_using_while(4000000)
elapsed = (time.time() - start)
print "result %s returned after %s seconds (1 million iterations)." % (fibsum, elapsed)
'''